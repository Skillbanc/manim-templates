 # Project: Manim-Templates
# Copyright(c) 2024 Skillbanc.com, Inc.
# License: MIT License
# Contributor(s):   
#   Sudhakar Moparthy
import random  # Import the random module
from manim import *
from numpy import size
from AbstractAnim import AbstractAnim
import cvo

class Grade6Ch9IntroductionToAlgebra(AbstractAnim):
    
    def construct(self):
        self.RenderSkillbancLogo()
        self.fadeOutCurrentScene()
        self.intro()
        self.fadeOutCurrentScene()
        self.topic1()
        self.fadeOutCurrentScene()
        self.triangle()
        self.fadeOutCurrentScene()
        self.square()
        self.fadeOutCurrentScene()
        self.square1()
        self.fadeOutCurrentScene()
        self.variables()
        self.fadeOutCurrentScene()
        self.example()
        self.fadeOutCurrentScene()
        self.variable() 
        self.fadeOutCurrentScene()
        self.examples()
        self.fadeOutCurrentScene()
        self.example2()
        self.fadeOutCurrentScene()
        self.rules()
        self.fadeOutCurrentScene()
        self.rule2()
        self.fadeOutCurrentScene()
        self.simpleequation()
        self.fadeOutCurrentScene()
        self.simpleequation1()
        self.fadeOutCurrentScene()
        self.GithubSourceCodeReference()
        
    def SetDeveloperList(self):
        # return super().SetDeveloperList()
        self.DeveloperList="Bharathi Priyadarshini"
        
    def SetSourceCodeFileName(self):
        # return super().SetSourceCodeFileName()
        self.SourceCodeFileName="Grade6Chapter9IntroductionToAlgebra"   
    
    def intro(self):
        # Create CVO objects for the introduction
        self.colorChoice=[ORANGE,PINK,LIGHT_BROWN]
        self.angleChoice= [TAU/4,TAU/4]
        self.isRandom=False
        p1 = cvo.CVO().CreateCVO("Introduction To Algebra", "").setPosition([-5,2,0])
        p2 = cvo.CVO().CreateCVO("Main Feature", " use of letters or Alphabets").setPosition([-2,0,0])
        p3 = cvo.CVO().CreateCVO("letter", "").setPosition([3,0,0])
        p3onamelist=["letters can represent any number","Stand for an unknown quantity"]
        p1.cvolist.append(p2)
        p2.cvolist.append(p3)
        p3.extendOname(p3onamelist)
        p2.setcircleradius(2)  
        p3.setcircleradius(1.5)  
        self.setNumberOfCirclePositions(3)
        self.setNumberOfAngleChoices(4)
        self.construct1(p1, p1 )
        self.wait(2)  
    
    def topic1(self):
        self.isRandom=False
        self.colorChoice=[WHITE,WHITE,WHITE]
        self.angleChoice= [TAU/5,TAU/4]
        p1 = cvo.CVO().CreateCVO("Patterns-Making Rules", "").setPosition([-4,2,0])
        p3 = cvo.CVO().CreateCVO("pattern-1", "create a triangle  ").setPosition([4,2.5,0])
        p4 = cvo.CVO().CreateCVO("pattern-2", "create a square").setPosition([4,-2.5,0])
        p1.cvolist.append(p3)
        p1.cvolist.append(p4)
        p1.setcircleradius(1)  
        p3.setcircleradius(1.3)  
        p4.setcircleradius(1.3)  
        self.setNumberOfCirclePositions(3)
        self.construct1(p1, p1 )
        self.wait(1.5)
    
    def triangle(self):
        t1 = Text("Pattern- 1 : To create Triangle",font_size=27,color=PINK)
        t1.move_to([0,3.2, 0])
        self.play(Write(t1))
        self.wait(1)
        # self.play(Write(NumberPlane()))
        tri = Triangle(color=BLUE).move_to([-6, 2, 0])  
        self.play(Write(tri))
        t2 = Text("1 triangle",font_size=18)
        t2.move_to([-6,0.8, 0])
        self.play(Write(t2))
        self.wait(1)

        t1= Triangle(color=BLUE).move_to([-3, 2, 0])
        t2 = Triangle(color=BLUE).move_to([-1, 2, 0])
        self.play(Write(t1))
        self.play(Write(t2))
        t2 = Text("2  triangles",font_size=18)
        t2.move_to([-2,0.8, 0])
        self.play(Write(t2))
        self.wait(1)

        t3= Triangle(color=BLUE).move_to([2, 2, 0])
        t4 = Triangle(color=BLUE).move_to([4, 2, 0])
        t5= Triangle(color=BLUE).move_to([6, 2, 0])
        self.play(Write(t3))
        self.play(Write(t4))
        self.play(Write(t5))
        t3 = Text("3  triangles",font_size=18)
        t3.move_to([4,0.8, 0])
        self.play(Write(t3))
        self.wait(1)

        t0 = Text(" So here we can observe",font_size=20)
        t22 = Text("To create 1  triangle we need 3 lines",font_size=20)
        t33 = Text("To create 2  triangles we need 6 lines",font_size=20)
        t44 = Text("To create 3  triangles we need 9 lines",font_size=20)
        t0.move_to([-5.2,-0.3,0])
        t22.move_to([-4.4,-0.8,0])
        t33.move_to([-4.4,-1.3,0])
        t44.move_to([-4.4,-1.8,0])
        
        self.play(Write(t0))
        self.wait(1.5)
        self.play(Write(t22))
        self.wait(1.5)
        self.play(Write(t33))
        self.wait(1.5)
        self.play(Write(t44))
        self.wait(1.8)
    
        text = Text("So the pattern is:",font_size=20)
        t11 = Text("No.of lines required = 3 * No.of triangles",font_size=20)
        t12 = Text("Therefore , no.of lines  required  for 1  triangle = 3 * 1 = 3",font_size=20)
        t13 = Text("for  2  triangles= 3 * 2 = 6",font_size=20)
        t14 = Text("for  3  triangles= 3 * 3 = 9 ",font_size=20)
        t15 = Text("for  4  triangles= 3 * 4 = 12  etc ",font_size=20)
        text.move_to([1.4,-0.3,0])
        t11.move_to([2.5,-0.8,0])
        t12.move_to([3.4,-1.3,0])
        t13.move_to([1.5,-1.8,0])
        t14.move_to([1.5,-2.3,0])
        t15.move_to([1.7,-2.8,0])
        self.play(Write(text))
        self.wait(1.5)
        self.play(Write(t11))
        self.wait(1.5)
        self.play(Write(t12))
        self.wait(1.5)
        self.play(Write(t13))
        self.wait(1.5)
        self.play(Write(t14))
        self.wait(1.5)
        self.play(Write(t15))
        self.wait(3)

    def square(self):
        # self.play(Write(NumberPlane()))
        t1 = Text("Pattern- 2 : To create Square",font_size=27,color=PINK)
        t1.move_to([0,3.2, 0])
        self.play(Write(t1))
        self.wait(1)
        # self.play(Write(NumberPlane()))
        scale_factor = 0.8
        s = Square(color=BLUE).scale(scale_factor).move_to([-6, 2, 0])
        self.play(Write(s))
        t2 = Text("1 Square",font_size=18)
        t2.move_to([-6,0.8, 0])
        self.play(Write(t2))
        self.wait(1)
        scale_factor = 0.8
        s1 = Square(color=BLUE).scale(scale_factor).move_to([-3, 2, 0])
        s2 = Square(color=BLUE).scale(scale_factor).move_to([-1, 2, 0])
        self.play(Write(s1))
        self.play(Write(s2))
        t2 = Text("2  Squares",font_size=18)
        t2.move_to([-2,0.8, 0])
        self.play(Write(t2))
        self.wait(1)
        scale_factor = 0.8
        s3 = Square(color=BLUE).scale(scale_factor).move_to([2, 2, 0])
        s4 = Square(color=BLUE).scale(scale_factor).move_to([4, 2, 0])
        s5 = Square(color=BLUE).scale(scale_factor).move_to([6, 2, 0])
        self.play(Write(s3))
        self.play(Write(s4))
        self.play(Write(s5))
        t3 = Text("3  Squares",font_size=18)
        t3.move_to([4,0.8, 0])
        self.play(Write(t3))
        self.wait(1)
        t0 = Text(" So here we can observe",font_size=20)
        t22 = Text("To create 1  square we need 4 lines",font_size=20)
        t33 = Text("To create 2  squares we need 8 lines",font_size=20)
        t44 = Text("To create 3  squares we need 12 lines",font_size=20)
        t0.move_to([-5.2,-0.3,0])
        t22.move_to([-4.4,-0.8,0])
        t33.move_to([-4.4,-1.3,0])
        t44.move_to([-4.4,-1.8,0])
        self.play(Write(t0))
        self.wait(1.5)
        self.play(Write(t22))
        self.wait(1.5)
        self.play(Write(t33))
        self.wait(1.5)
        self.play(Write(t44))
        self.wait(1.8)
    
        text = Text("So the pattern is:",font_size=20)
        t11 = Text("No.of lines required = 4 * No.of squares",font_size=20)
        t12 = Text("Therefore , no.of lines  required  for 1  square = 4 * 1 = 4",font_size=20)
        t13 = Text("for  2  squares= 4 * 2 = 8",font_size=20)
        t14 = Text("for  3  squares= 4 * 3 = 12 ",font_size=20)
        t15 = Text("for  4  squares= 4 * 4 = 16  etc ",font_size=20)
        text.move_to([1.4,-0.3,0])
        t11.move_to([2.5,-0.8,0])
        t12.move_to([3.4,-1.3,0])
        t13.move_to([1.5,-1.8,0])
        t14.move_to([1.5,-2.3,0])
        t15.move_to([1.7,-2.8,0])
        self.play(Write(text))
        self.wait(1.5)
        self.play(Write(t11))
        self.wait(1.5)
        self.play(Write(t12))
        self.wait(1.5)
        self.play(Write(t13))
        self.wait(1.5)
        self.play(Write(t14))
        self.wait(1.5)
        self.play(Write(t15))
        self.wait(3)
        
    def square1(self):
        # self.play(Write(NumberPlane()))
        t1 = Text("More Patterns",font_size=27,color=PINK)
        t1.move_to([0,3.3, 0])
        self.play(Write(t1))
        self.wait(1)
        # self.play(Write(NumberPlane()))
        
        s = Square(color=BLUE).move_to([-6, 2, 0])
        self.play(Write(s))
        t2 = Text("1 Square",font_size=18)
        t2.move_to([-6,0.8, 0])
        self.play(Write(t2))
        self.wait(1)
        
        s1 = Square(color=BLUE).move_to([-3, 2, 0])
        s2 = Square(color=BLUE).move_to([-1, 2, 0])
        self.play(Write(s1))
        self.play(Write(s2))
        t2 = Text("2  Squares",font_size=18)
        t2.move_to([-2,0.8, 0])
        self.play(Write(t2))
        self.wait(1)
        
        s3 = Square(color=BLUE).move_to([2, 2, 0])
        s4 = Square(color=BLUE).move_to([4,2, 0])
        s5 = Square(color=BLUE).move_to([6, 2, 0])
        self.play(Write(s3))
        self.play(Write(s4))
        self.play(Write(s5))
        t3 = Text("3  Squares",font_size=18)
        t3.move_to([4,0.8, 0])
        self.play(Write(t3))
        self.wait(1)
        
        t0 = Text(" So here we can observe",font_size=20)
        t22 = Text("To create 1  square we need 4 lines",font_size=20)
        t33 = Text("To create 2  squares we need 7 lines",font_size=20)
        t44 = Text("To create 3  squares we need 10 lines",font_size=20)
        t0.move_to([-5.2,-0.3,0])
        t22.move_to([-4.4,-0.8,0])
        t33.move_to([-4.4,-1.3,0])
        t44.move_to([-4.4,-1.8,0])
        
        self.play(Write(t0))
        self.wait(1.5)
        self.play(Write(t22))
        self.wait(1.5)
        self.play(Write(t33))
        self.wait(1.5)
        self.play(Write(t44))
        self.wait(1.8)
    
        text = Text("So the pattern is:",font_size=20)
        t11 = Text("No.of lines required = 3 *(no.of squares)+1",font_size=20)
        t12 = Text("Therefore , no.of lines  required  for 1  square = 3 * 1 + 1 =4",font_size=20)
        t13 = Text("for  2  squares= 3 * 2 + 1 = 7",font_size=20)
        t14 = Text("for  3  squares= 3 * 3 + 1= 10 ",font_size=20)
        t15 = Text("for  4  squares= 3 * 4 + 1= 13  etc ",font_size=20)
        text.move_to([1.4,-0.3,0])
        t11.move_to([2.5,-0.8,0])
        t12.move_to([3.4,-1.3,0])
        t13.move_to([1.5,-1.8,0])
        t14.move_to([1.5,-2.3,0])
        t15.move_to([1.7,-2.8,0])
        self.play(Write(text))
        self.wait(1.5)
        self.play(Write(t11))
        self.wait(1.5)
        self.play(Write(t12))
        self.wait(1.5)
        self.play(Write(t13))
        self.wait(1.5)
        self.play(Write(t14))
        self.wait(1.5)
        self.play(Write(t15))
        self.wait(3)
        
    def variables(self):
        # self.play(Write(NumberPlane()))
        text = Text("Variables:",font_size=30,color=LIGHT_PINK)
        text.move_to([0,3.3, 0])
        self.play(Write(text))
        t1 = Text("consider the previous example:",font_size=25)
        t1.move_to([-4.6,2.6, 0])
        self.play(Write(t1))
        self.wait(1)
        
        t2 = Text("The pattern that we observed is ",font_size=25)
        pattern_text = Text("  3 *(no.of squares)+1", font_size=25, color=YELLOW)
        main_group = VGroup(t2, pattern_text).arrange(RIGHT, buff=0.1)
        group = VGroup(main_group).arrange(DOWN)
        # Move the group to the desired position
        group.move_to([-3, 1.8, 0])  # Adjust the position as needed
        
        self.play(Write(group))
        underline = Line(
            pattern_text.get_left() + DOWN * 0.3,
            pattern_text.get_right() + DOWN * 0.3,
            color=YELLOW
        )
        pattern_text.set_color(RED)
        self.play(Create(underline))
        self.wait(2)
        
        t3 = Text("In  algebra  we  say  no.of  squares  is  a  variable",font_size=25) 
        # t4 = Text(" we can denote a variable using a small letter",font_size=20)
        group = VGroup(t3).arrange(DOWN)
        # Move the group to the desired position
        group.move_to([-3.1, 0.9, 0])  # Adjust the position as needed
        self.play(Write(group))
        self.wait(2)
        t4 = Text(" We  can  denote a  variable  using  a  small  letter  i.e a,b,c,d.....z",font_size=25)
        t4.move_to([-2,0,0])
        self.play(Write(t4))
        self.wait(1.5)
        t11 = Text("So, 3 * (no.of squares) + 1 can be written as", font_size=25)
        t12 = Text(" 3m + 1", font_size=25, color=YELLOW)
        t13 = Text(", Where m is a variable", font_size=25)
        
        # Position the text
        t11.move_to([-3.5, -0.8, 0])
        t12.next_to(t11, RIGHT, buff=0.1)
        t13.next_to(t12, RIGHT, buff=0.1)

        # Add text to the scene
        self.play(Write(t11))
        self.play(Write(t12))
        self.play(Write(t13))
        self.wait(3)

    def example(self):
        t1 = Text("Example: Build 8 squares ",font_size=25)
        t1.move_to([-5,3,0])
        self.play(Write(t1))
        self.wait(1)
        t2 = Text("Solution: Lines required to build one square is 4",font_size=25)
        t2.move_to([-3.1,2,0])
        self.play(Write(t2))
        self.wait(1.5)
        t3 = Text("we know that ,to build m squares lines required = 4 * m",font_size=25)
        t3.move_to([-2.5,1,0])
        self.play(Write(t3))
        self.wait(2)
        t = Text("So, the algebraic expression is ", font_size=25)
        t0 = Text("4 * m", font_size=25, color=YELLOW)
        
        # Position the text
        t.move_to([-4.5, 0, 0])
        t0.next_to(t, RIGHT)

        # Add text to the scene
        self.play(Write(t))
        self.play(Write(t0))
        self.wait(2)
        t4 = Text("Therefore for 8 squares = 4 * 8= 32 lines ",font_size=25)
        t4.move_to([-3.8,-1,0])
        self.play(Write(t4))
        self.wait(1.5)

        scale_factor = 0.4
        s = Square(color=BLUE).scale(scale_factor).move_to([-6,- 2.5, 0])
        self.play(Write(s))
        
        s1 = Square(color=BLUE).scale(scale_factor).move_to([-5, -2.5, 0])
        s2 = Square(color=BLUE).scale(scale_factor).move_to([-4, -2.5, 0])
        self.play(Write(s1))
        self.play(Write(s2))
    
        s3 = Square(color=BLUE).scale(scale_factor).move_to([-3, -2.5, 0])
        s4 = Square(color=BLUE).scale(scale_factor).move_to([-2, -2.5, 0])
        s5 = Square(color=BLUE).scale(scale_factor).move_to([-1, -2.5, 0])
        self.play(Write(s3))
        self.play(Write(s4))
        self.play(Write(s5))
        s6 = Square(color=BLUE).scale(scale_factor).move_to([0, -2.5, 0])
        s7 = Square(color=BLUE).scale(scale_factor).move_to([1, -2.5, 0])
        self.play(Write(s6))
        self.play(Write(s7))
        self.wait(2)

    def variable(self):
        # self.play(Write(NumberPlane()))
        self.isRandom=False
        self.colorChoice=[PINK,BLUE]
        self.angleChoice=[TAU/4]
        p1= cvo.CVO().CreateCVO("variables", "").setPosition([-3.5,0,0])
        p3 = cvo.CVO().CreateCVO("Operations performed on varibales", "").setPosition([3.5,0,0])
        p3onamelist=["Addition","Subtraction","Multiplication","Division"]
        p1.cvolist.append(p3)
        p3.extendOname(p3onamelist)
        p3.setcircleradius(1.5)
        self.setNumberOfCirclePositions(2)
        self.construct1(p1,p1)
        self.wait(2)

    def examples(self):
        text = Text("Example of expression with variable",font_size=25,color=PINK)
        text.move_to([0,3,0])
        self.play(Write(text))
          
        t1= Text("->Statement : divided by 7",font_size=25)
        t2= Text("Answer : lets take variable as n",font_size=25)
        t3=Text("So, Expression is n/7",font_size=25)
        
        t1.move_to([0,2,0])
        self.play(Write(t1))
        self.wait(1)
        t2.move_to([0,1.3,0])
        self.play(Write(t2))
        self.wait(1)
        t3.move_to([0,0.5,0])
        self.play(Write(t3))
        self.wait(2)
         
        t4= Text("->Statement : 5 more than what Geeta has",font_size=25)
        t5= Text("Answer : Variable is  what Geeta has , lets  consider  this  as  y",font_size=25)
        t6= Text("So, Expression is y + 5",font_size=25)
        t4.move_to([0,-0.5,0])
        self.play(Write(t4))
        self.wait(1)
        t5.move_to([0,-1.3,0])
        self.play(Write(t5))
        self.wait(1)
        t6.move_to([0,-2,0])
        self.play(Write(t6))
        self.wait(2)
       
    def example2(self): 
        # self.play(Write(NumberPlane()))
        text = Text("Example of Writing statement for expression",font_size=25,color=BLUE)
        text.move_to([0,3,0])
        self.play(Write(text))
        self.wait(1)
        t1= Text("Expression: 2P",font_size=25)
        t2= Text("Statement: Raju has twice the money than Seema",font_size=25)
        group = VGroup(t1,t2).arrange(DOWN)
        # Move the group to the desired position
        group.move_to([0, 1.5, 0])  # Adjust the position as needed
        self.play(Write(group))
        self.wait(2)
         
        t3= Text("Expression: 7 + x",font_size=25)
        t4= Text("Statement: I have 7 marbles more than Dilip",font_size=25)
        group = VGroup(t3,t4).arrange(DOWN)
        # Move the group to the desired position
        group.move_to([0, -0.5, 0])  # Adjust the position as needed
        self.play(Write(group))
        self.wait(1.5)

        t6= Text("Note:",font_size=25)
        t7 = Text("You can write a statement of your own  ",font_size=20)
       
        group = VGroup(t6,t7).arrange(DOWN)
        # Move the group to the desired position
        group.move_to([2.9, -2, 0])  # Adjust the position as needed
        self.play(Write(group))
        self.wait(3)
        
    def rules(self):
        # self.play(Write(NumberPlane()))
        text = Text("Rules From Geometry/Mensuration",font_size=25)
        text.move_to([0,3.2,0])
        self.play(Write(text))
        self.wait(1)
        t1= Text("Perimeter of a square:",font_size=25,color=LIGHT_PINK)
        t1.move_to([-5,2.5,0])
        self.play(Write(t1))
        scale_factor = 0.8
        s = Square(color=BLUE).scale(scale_factor).move_to([5, 1, 0])
        self.add(s)
        t = Text("s",font_size=22)
        t.move_to([5,0,0])
        self.play(Write(t))
        t2 = Text("A square has 4 sides and they are equal in length",font_size=20)
        t2.move_to([-3.7,1.5,0])
        self.play(Write(t2))
        self.wait(1.5)
        t3 = Text("Therefore, the perimeter of a square=Sum of the length of the sides of the square",font_size=20)
        t3.move_to([-2,1,0])
        self.play(Write(t3))
        self.wait(2)
        t4 = Text("i.e side + side +side + side=4 * length of the side.= 4 * s = 4s",font_size=20)
        t4.move_to([-3.2,0.3,0])
        self.play(Write(t4))
        self.wait(2)
        t5 = Text("Thus we get the rule for perimeter of square",font_size=20)
        t5.move_to([-3.7,-0.3,0])
        self.play(Write(t5))
        self.wait(2)
        t6= Text("Note:",font_size=25)
        t7 = Text("The use of the variable allows us to write the ",font_size=20)
        t8= Text(" general rule in a way that is concise and easy to remember",font_size=20)
        group = VGroup(t6,t7,t8).arrange(DOWN)
        # Move the group to the desired position
        group.move_to([2.9, -1.5, 0])  # Adjust the position as needed
        self.play(Write(group))
        self.wait(3)
        
    def rule2(self):
        # self.play(Write(NumberPlane()))
        text = Text("Rules From Arithmetic",font_size=25)
        text.move_to([-5,3.5,0])
        self.play(Write(text))
        self.wait(1)
        p10 = cvo.CVO().CreateCVO("observe the following number pattern", "").setPosition([0,0,0])
        p10.onameList.append("1st even number 2, pattern=2*1")
        p10.onameList.append("2nd even number 4, pattern=2*2")  
        p10.onameList.append("3rd even number 6, pattern=2*3")
        p10.onameList.append("4th even number 8, pattern=2*4")
        self.construct2(p10, p10)
        self.wait(1)
        t1 = Text("so from above pattern , we can observe",font_size=23)
        t1.move_to([-4,-1,0])
        self.play(Write(t1))
        self.wait(1)
        t2 = Text("for nth even number, the  pattern  will  be  2 * n = 2n",font_size=23)
        t2.move_to([-3,-1.5,0])
        self.play(Write(t2))
        self.wait(1.5)
        t3 = Text("So  the  nth  term of  the  pattern  2,4,6,8,10 ……  is  2n.",font_size=23)
        t3.move_to([-2.9,-2,0])
        self.play(Write(t3))
        self.wait(3)

    def simpleequation(self):
        # self.play(Write(NumberPlane()))
        self.isRandom=False
        self.colorChoice=[LIGHT_PINK,PURPLE,YELLOW,GREEN_A]
        self.angleChoice = [TAU/2,TAU/4,TAU/4]
        p1= cvo.CVO().CreateCVO("Simple Equation", "").setPosition([-5,2,0])
        p4= cvo.CVO().CreateCVO("Example", "2x+5=13").setPosition([-3,0,0])
        p5= cvo.CVO().CreateCVO("LHS", "2x+5").setPosition([4.7,2,0])
        p6= cvo.CVO().CreateCVO("RHS", "13").setPosition([4.9,-2,0])
        p1.cvolist.append(p4)
        p4.cvolist.append(p5)
        p4.cvolist.append(p6)
        self.setNumberOfCirclePositions(4)
        self.construct1(p1,p1)
        self.wait(2)
        
    def simpleequation1(self):
        # self.play(Write(NumberPlane()))
        t = Text(" Solutions of Equation by Trial and Error Method ",font_size=30,color=PURPLE_B)
        t.move_to([-2,3.5, 0])
        self.play(Write(t))
        self.wait(1)
        t1 = Text("Example: Find the solution of the equation x + 3 = 7 by Trial and Error method",font_size=25)
        t1.move_to([-2.5,1.9, 0])
        self.play(Write(t1))
        self.wait(1.5)
        t2 = Text("Solution : Given equation is x + 3 = 7",font_size=25)
        t2.move_to([-4.2,1.2, 0])
        self.play(Write(t2))
        self.wait(1.5)
        t3 = Text("Here : LHS is x + 3  ",font_size=25)
        t3.move_to([-4.3,0.5, 0])
        self.play(Write(t3))
        self.wait(1.5)
        t4 = Text(" RHS is 7 ",font_size=25)
        t4.move_to([-4.1,-0.3, 0])
        self.play(Write(t4))
        self.wait(1.5)
        t5 = Text("To find the solution of the equation we will use  Trail and Error method ",font_size=25)
        t5.move_to([-1.5,-1, 0])
        self.play(Write(t5))
        self.wait(1.5)
    
        self.play(FadeOut(t1), FadeOut(t2), FadeOut(t3), FadeOut(t4), FadeOut(t5))
        p10 = cvo.CVO().CreateCVO("By Using Trial and Error Method,substitute m=1,2,3,4...", "").setPosition([4,-1,0])
        p10.onameList.append("LHS:1 + 3=4 not equal to RHS")
        p10.onameList.append("LHS:2 + 3=5 not equal to RHS")  
        p10.onameList.append("LHS:3 + 3=6 not equal to RHS")
        p10.onameList.append("LHS:4 + 3=7 equal to RHS") 
        self.construct2(p10, p10)
        self.wait(2)
        t7 = Text("The equation x + 3 = 7 is satisfied only when x = 4.",font_size=25)
        t7.move_to([2.8,-1, 0])
        self.play(Write(t7))
        self.wait(1)
        t8 = Text("Therefore x=4 is  solution or root of equation x + 3 = 7 ",font_size=25)
        t8.move_to([2.5,-1.5, 0])
        self.play(Write(t8))
        self.wait(3)
        
if __name__ == "__main__":
    scene = Grade6Ch9IntroductionToAlgebra()
    scene.render()