# Project: Manim-Templates
# Copyright(c) 2024 Skillbanc.com, Inc.
# License: MIT License
# Contributor(s):   
#   Sudhakar Moparthy
import random  # Import the random module
from manim import *
from numpy import size
from AbstractAnim import AbstractAnim
import cvo

class Grade7Ch13AreaAndPerimeter(AbstractAnim):
    
    def construct(self):
        self.RenderSkillbancLogo()
        self.fadeOutCurrentScene()
        self.Intro()
        self.fadeOutCurrentScene()
        self.square()
        self.fadeOutCurrentScene()
        self.rectangle()
        self.fadeOutCurrentScene()
        self.Parallelogram()
        self.fadeOutCurrentScene()
        self.Triangle()
        self.fadeOutCurrentScene()
        self.areatriangle()
        self.fadeOutCurrentScene()
        self.rhombus()
        self.fadeOutCurrentScene()
        self.circle()
        self.fadeOutCurrentScene()
        self.rectanglurpath()
        self.fadeOutCurrentScene()
        self.GithubSourceCodeReference()
        
    def SetDeveloperList(self):
        # return super().SetDeveloperList()
        self.DeveloperList="Bharathi Priyadarshini"
        
    def SetSourceCodeFileName(self):
        # return super().SetSourceCodeFileName()
        self.SourceCodeFileName="Grade7Chapter13AreaAndPerimeter"   
    
    def Intro(self):
        # self.play(Write(NumberPlane()))
        self.isRandom=False
        self.colorChoice=[LIGHT_PINK,ORANGE,WHITE]
        self.angleChoice = [TAU/4,TAU/4,TAU/4]
        p1= cvo.CVO().CreateCVO("Area And Perimeter", "").setPosition([-4,0,0])
        p2 = cvo.CVO().CreateCVO("Area", "space inside the shape").setPosition([3,2,0])
        p3= cvo.CVO().CreateCVO("Perimeter", "distance around the shape").setPosition([3,-2,0])
        p1.cvolist.append(p2)
        p1.cvolist.append(p3)
        self.setNumberOfCirclePositions(3)
        self.construct1(p1,p1)
        self.wait(1)

    def square(self):
        t1 = Text("Square",color=LIGHT_PINK,font_size=25)
        t2 = Text("a",color=WHITE,font_size=20)
        s = Square(color=PINK)
        
        s.move_to(LEFT*4)
        t1.move_to([-4,1.7,0])
        t2.move_to([-6,0,0])
        arrow = DoubleArrow(color = GREEN,start=[-5.5,1.2,0],end=[-5.5,-1.2,0])

        # self.play(Write(NumberPlane()))
        self.play(Write(s))
        self.play(Write(t1))
        self.play(Create(arrow))
        self.play(Write(t2))
        self.wait(1)
        self.isRandom = False
        self.colorChoice=[LIGHT_PINK,WHITE,WHITE,ORANGE]
        self.angleChoice = [TAU/4,TAU/4,TAU/4,TAU/4]
        p3=cvo.CVO().CreateCVO("Square","").setPosition([0,2.3,0])
        p4=cvo.CVO().CreateCVO("Area Formula","$a^2$").setPosition([5,0,0])
        p5=cvo.CVO().CreateCVO("Perimeter Formula","4a").setPosition([5,-2.5,0])
        p6=cvo.CVO().CreateCVO("Side","a").setPosition([5,2.5,0])
        p3.cvolist.append(p6)
        p3.cvolist.append(p4)
        p3.cvolist.append(p5)
        self.setNumberOfCirclePositions(4)
        self.construct1(p3,p3)
        self.wait(1.5)
        
    def rectangle(self):
        # self.play(Write(NumberPlane()))
        t1 =  Text("Rectangle",color=LIGHT_PINK,font_size=25)
        t2 = Text("L",color=WHITE,font_size=20)
        t3 = Text("B",color=WHITE,font_size=20)
        r = Rectangle(width=3, height=2, color=BLUE)
        
        r.move_to(LEFT*4)
        t1.move_to([-4,1.5,0])
        t2.move_to([-6,0,0])
        t3.move_to([-4,-1.7,0])
        arrow1 = DoubleArrow(color= GOLD,start=[-5.7,1.2,0],end=[-5.7,-1.2,0])
        arrow2 = DoubleArrow(color=GOLD,start=[-2.3,-1.3,0],end=[-5.7,-1.3,0])
    
        self.play(Write(r))
        self.play(Write(t1))
        self.play(Create(arrow1))
        self.play(Write(t2))
        self.play(Create(arrow2))
        self.play(Write(t3))
        self.wait(1)

        self.isRandom = False
        self.angleChoice = [TAU/4,TAU/4,TAU/4]
        self.colorChoice=[ORANGE,BLUE,PINK,WHITE]
        p1=cvo.CVO().CreateCVO("Rectangle", "").setPosition([0,2.3,0])
        p2=cvo.CVO().CreateCVO("Area", "l*b").setPosition([5,0,0])
        p3=cvo.CVO().CreateCVO("Perimeter", "2(l+b)").setPosition([5,-2.5,0])
        p4=cvo.CVO().CreateCVO("Notation","").setPosition([5,2.5,0])
        p4onamelist=["l is length","b is breadth"]
        p1.cvolist.append(p2)
        p1.cvolist.append(p3)
        p1.cvolist.append(p4)
        p4.extendOname(p4onamelist)  
        self.construct1(p1,p1)
        self.wait(1.5)
        
    def Parallelogram(self):  
        # self.play(Write(NumberPlane()))
        t1 = Text("Parallelogram",color=LIGHT_PINK,font_size=25)
        t2 = Text("b",color=WHITE,font_size=20)
        t3 = Text("h",color=WHITE,font_size=20)
        l1 = Line(color=BLUE,start=[-6,2,0],end=[-3,1,0])
        l2 = Line(color=BLUE,start=[-3,1,0],end=[-3,-3,0])
        l3 = Line(color=BLUE,start=[-3,-3,0],end=[-6,-2,0])
        l4 = Line(color=BLUE,start=[-6,-2,0],end=[-6,2,0])

        t1.move_to([-4,3,0])
        t2.move_to([-6.5,0,0])
        t3.move_to([-3.5,-1.25,0])
        arrow1 = DoubleArrow(color=YELLOW,start=[-6.25,2.25,0],end=[-6.25,-2.25,0])
        arrow2 = DoubleArrow(color=YELLOW,start=[-6.25,-1.75,0],end=[-2.75,-1.75,0])

        self.play(Write(l1))
        self.play(Write(l2))
        self.play(Write(l3))
        self.play(Write(l4))
        self.play(Write(t1))
        self.play(Create(arrow1))
        self.play(Write(t2))
        self.play(Create(arrow2))
        self.play(Write(t3))
        self.wait(1)
        self.isRandom=False
        self.colorChoice=[RED_A,BLUE_A,BLUE_B,ORANGE,WHITE]
        self.angleChoice = [TAU/4,TAU/4,TAU/4,-TAU/4]
        p2=cvo.CVO().CreateCVO("Area Formula", "b*h").setPosition([1.5,2,0])
        p3=cvo.CVO().CreateCVO("breadth","b").setPosition([5,2.5,0])
        p4=cvo.CVO().CreateCVO("height","h").setPosition([5,0,0])
        p5=cvo.CVO().CreateCVO("Example", "b=8 h=4").setPosition([5,-2.5,0])
        p6=cvo.CVO().CreateCVO("Area of Parallelogram", "8*4 =32").setPosition([-1,-0.5,0])                                                            
        p2.cvolist.append(p3)
        p2.cvolist.append(p4)
        p2.cvolist.append(p5)
        p5.cvolist.append(p6)
        self.construct1(p2,p2)
        self.wait(1.5)
    
    def Triangle(self):
    #    self.play(Write(NumberPlane()))
        t11 = Text("Area of Triangle",font_size=25)
        t11.move_to([0,3.5, 0])
        self.play(Write(t11))
        t12= Text("Note:",font_size=22)
        t12.move_to([-6, 3.2, 0])
        self.play(Write(t12))
        t13 = Text("1.Triangles  are  parts  of  parallelogram",font_size=20)
        t13.move_to([-4.6,2.5, 0])
        self.play(Write(t13))
        self.wait(0.5)
        t14 = Text("2.Triangles  are  parts  of  rectangle",font_size=20)
        t14.move_to([4,2.5, 0])
        self.play(Write(t14))
        self.wait(0.5)
       
        l1 = Line(color=BLUE,start=[-6,2,0],end=[-3,1,0])
        l2 = Line(color=BLUE,start=[-3,1,0],end=[-3,-3,0])
        l3 = Line(color=BLUE,start=[-3,-3,0],end=[-6,-2,0])
        l4 = Line(color=BLUE,start=[-6,-2,0],end=[-6,2,0])

        label_a = Text("A", color=WHITE, font_size=20).move_to([-6.2, 2.2, 0])
        label_b = Text("B", color=WHITE, font_size=20).move_to([-2.8, 1.2, 0])
        label_c = Text("C", color=WHITE, font_size=20).move_to([-2.8, -3.2, 0])
        label_d = Text("D", color=WHITE, font_size=20).move_to([-6.2, -2.2, 0])
        
        # Diagonal
        diagonal = DashedLine(start=[-6, 2, 0], end=[-3, -3, 0], color=YELLOW)

        self.play(Write(l1))
        self.play(Write(l2))
        self.play(Write(l3))
        self.play(Write(l4))
        self.play(Write(label_a))
        self.play(Write(label_b))
        self.play(Write(label_c))
        self.play(Write(label_d))
        self.play(Create(diagonal))
        self.wait(1)
       
        r = Rectangle(color=BLUE, height=2, width=4)
        
        r.move_to(RIGHT * 4)
        self.play(Write(r))
       # Labels for vertices
        label_a = Text("A", color=WHITE, font_size=20).move_to([1.8, 1, 0])
        label_b = Text("B", color=WHITE, font_size=20).move_to([6.2, 1, 0])
        label_c = Text("C", color=WHITE, font_size=20).move_to([6.2, -1, 0])
        label_d = Text("D", color=WHITE, font_size=20).move_to([1.8, -1, 0])
        
        # Diagonal
        diagonal = DashedLine(start=[2, 1, 0], end=[6, -1, 0], color=YELLOW)
        
        self.play(Write(label_a))
        self.play(Write(label_b))
        self.play(Write(label_c))
        self.play(Write(label_d))
        self.play(Create(diagonal))
        self.wait(1) 
       
        t15 = Text("ABC and ADC are parts of parallelogram and rectangle which are in shape of triangle",font_size=18)
        t15.move_to([2,-2, 0])
        self.play(Write(t15))
        self.wait(1.5)

    def areatriangle(self):
        # self.play(Write(NumberPlane()))
        t1 = Text("Triangle",color=LIGHT_PINK,font_size=25)
        t2= Text("h",color=WHITE,font_size=20)
        t3= Text("b",color=WHITE,font_size=20)
        tri = Triangle(color=BLUE)
        
        tri.move_to([LEFT*5])
        t1.move_to([-5,1.5,0])
        t2.move_to([-4.5,0.5,0])
        t3.move_to([-5,-1.25,0])
        arrow1 = DoubleArrow(color=ORANGE,start=[-5,1,0],end=[-5,-1,0])
        arrow2 = DoubleArrow(color=ORANGE,start=[-6.25,-1,0],end=[-3.75,-1,0])

        self.play(Write(tri))
        self.play(Write(t1))
        self.play(Create(arrow1))
        self.play(Write(t2))
        self.play(Create(arrow2))
        self.play(Write(t3))
        self.wait(1)
        self.isRandom=False
        self.colorchoice=[RED_A,BLUE_A,BLUE_B,ORANGE,WHITE]
        self.angleChoice = [TAU / 4,TAU / 4,TAU / 4,-TAU / 4]
        p2=cvo.CVO().CreateCVO("Area Formula", "1/2(b*h)").setPosition([1.5,2.3,0])
        p3=cvo.CVO().CreateCVO("breadth","b").setPosition([5,2.5,0]) 
        p4=cvo.CVO().CreateCVO("height","h").setPosition([5,0,0])
        p5=cvo.CVO().CreateCVO("Example", "b=13 h=6").setPosition([5,-2.5,0])
        p6=cvo.CVO().CreateCVO("Area of Triangle", "1/2(13*6) = 39").setPosition([-1,-0.5,0])
        p2.cvolist.append(p3)
        p2.cvolist.append(p4)
        p2.cvolist.append(p5)
        p5.cvolist.append(p6)
        p6.setcircleradius(1.5)
        self.construct1(p2,p2)
        self.wait(1.5)
    
    def rhombus(self):  
        # self.play(Write(NumberPlane()))
        t0 = Text("Rhombus",color=LIGHT_PINK,font_size=25)
        t1 = Text("-> If all sides of parallelogram are equal it is called Rhombus",color=WHITE,font_size=20)
        t2 = Text("d1",color=WHITE,font_size=20)
        t3 = Text("d2",color=WHITE,font_size=20)
        l1 = Line(color=BLUE,start=[-6,0,0],end=[-4.5,2,0])
        l2 = Line(color=BLUE,start=[-4.5,2,0],end=[-3,0,0])
        l3 = Line(color=BLUE,start=[-3,0,0],end=[-4.5,-2,0])
        l4 = Line(color=BLUE,start=[-4.5,-2,0],end=[-6,0,0])
        t0.move_to([-4.3,3.5,0])
        t1.move_to([-3.5,3,0])
        t2.move_to([-4.25,1,0])
        t3.move_to([-5.25,-0.25,0])
        arrow1 = DoubleArrow(color=ORANGE,start=[-4.5,2.25,0],end=[-4.5,-2.25,0])
        arrow2 = DoubleArrow(color=ORANGE,start=[-6.25,0,0],end=[-2.75,0,0])
        self.play(Write(t0))
        self.play(Write(t1))
        self.play(Write(l1))
        self.play(Write(l2))
        self.play(Write(l3))
        self.play(Write(l4))
        self.play(Create(arrow1))
        self.play(Write(t2))
        self.play(Create(arrow2))
        self.play(Write(t3))
        self.wait(1)

        self.isRandom = False
        self.colorChoice=[RED_A,BLUE_A,BLUE_B,ORANGE,WHITE]
        self.angleChoice = [TAU/4,TAU/4,TAU/4,-TAU/4]
        p2=cvo.CVO().CreateCVO("Area Formula", "1/2(d1*d2)").setPosition([1.5,2,0])
        p3=cvo.CVO().CreateCVO("diagonal 1","d1").setPosition([5,2.5,0])
        p4=cvo.CVO().CreateCVO("diagonal 2","d2").setPosition([5,0,0])
        p5=cvo.CVO().CreateCVO("Example","d1=7.5 d2=5.6").setPosition([5,-2.5,0])
        p6=cvo.CVO().CreateCVO("Area of Rhombus", "1/2(7.5*5.6) = 21").setPosition([-1,-0.5,0])
        p2.cvolist.append(p3)
        p2.cvolist.append(p4)
        p2.cvolist.append(p5)
        p5.cvolist.append(p6)
        self.construct1(p2,p2)
        self.wait(1.5)
         
    def circle(self): 
        # self.play(Write(NumberPlane()))
        t1 = Text("Circle",color= LIGHT_PINK,font_size=25)
        t2 = Text("r", color=WHITE,font_size=20)
        c = Circle(color=BLUE, radius = 1.5)
        c.move_to(LEFT*4)
        t1.move_to([-4,2,0])
        t2.move_to([-4.5,0.75,0])
        arrow = DoubleArrow(color = ORANGE,start=[-4,-0.25,0],end=[-4,1.75,0])
        center_dot = Dot(point=c.get_center(), color=RED)
        self.play(Write(c))
        self.play(Write(t1)) 
        # self.play(Write(NumberPlane()))
        self.play(Write(center_dot))
        self.play(Create(arrow))
        self.play(Write(t2)) 
        self.wait(1)
        # circumference_arrow = CurvedArrow(start_point=[-5.5, 0, 0], end_point=[-2.5, 0, 0], radius=-1.5, angle=-PI)
        # self.play(Create(circumference_arrow))
        # self.wait(1)
        
        t6 = Text("circumference",font_size=15)
        t6.move_to([-6,-1, 0])
        self.play(Write(t6))
        # self.play(Indicate(c, color=YELLOW))
        
        # # Highlight the text "circumference"
        # self.play(Indicate(t6, color=YELLOW))
        
        # self.wait(1)
        self.play(
            AnimationGroup(
                Indicate(c, color=YELLOW),
                Indicate(t6, color=YELLOW),
                lag_ratio=0  # Ensures both animations happen simultaneously
            )
        )

        self.wait(1)

        self.isRandom = False
        self.colorChoice=[RED_A,BLUE_A,BLUE_B,ORANGE,WHITE,WHITE]
        self.angleChoice = [TAU/5,TAU/4,TAU/4,TAU/4,TAU/4]
        p1=cvo.CVO().CreateCVO("Circumference formula","").setPosition([1.5,2.5,0])
        p2=cvo.CVO().CreateCVO("using Radius","2$\pi$r").setPosition([5,2.5,0])
        p3=cvo.CVO().CreateCVO("using Diameter","$\pi$d").setPosition([5,0,0])
        p4=cvo.CVO().CreateCVO("Example","").setPosition([-1,1,0])
        p5=cvo.CVO().CreateCVO("r=14", "Circumference=2*(22/7)*14=88").setPosition([-0.4,-2.5,0])
        p6=cvo.CVO().CreateCVO("d=10", "Circumference=3.14*10=31.4").setPosition([5,-2.3,0])
        p1.cvolist.append(p2)
        p1.cvolist.append(p3)
        p1.cvolist.append(p4)
        p4.cvolist.append(p5)
        p4.cvolist.append(p6)
        self.construct1(p1,p1)
        self.wait(1.5)
        
    def rectanglurpath(self):
        # self.play(Write(NumberPlane()))
        # Draw the outer rectangle and labels
        t1 = Text("Rectangular Paths",font_size=25)
        t1.move_to([-5.5,3, 0])
        self.play(Write(t1))
        t1 = Text("Rectangle", color=LIGHT_PINK, font_size=25)
        t2 = Text("l", color=WHITE, font_size=20)
        t3 = Text("b", color=WHITE, font_size=20)
        r = Rectangle(color=BLUE, width=4, height=3)

        r.move_to(LEFT * 4)
        t1.move_to([-4, 2, 0])
        t2.move_to([-6.5, 0, 0])
        t3.move_to([-4, -2, 0])
        arrow1 = DoubleArrow(color=GOLD, start=[-6.2, 1.7, 0], end=[-6.2, -1.7, 0])
        arrow2 = DoubleArrow(color=GOLD, start=[-6.1, -1.7, 0], end=[-1.8, -1.7, 0])
        self.play(Write(r))
        self.play(Write(t1))
        self.play(Create(arrow1))
        self.play(Write(t2))
        self.play(Create(arrow2))
        self.play(Write(t3))
        self.wait(1)

        # Draw the inner rectangle with increased size
        inner_rectangle = Rectangle(color=YELLOW, width=3, height=2.25)
        inner_rectangle.move_to(LEFT * 4)  # Position inside the outer rectangle

        self.play(Write(inner_rectangle))
        self.wait(1)
        
        path_label_1 = Text("3 m", color=WHITE, font_size=15)
        path_label_2 = Text("3 m", color=WHITE, font_size=15)
        path_label_3 = Text("3 m", color=WHITE, font_size=15)
        path_label_4 = Text("3 m", color=WHITE, font_size=15)
        path_label_1.move_to([-5.7, 0, 0])
        path_label_2.move_to([-4, 1.2, 0])
        path_label_3.move_to([-2.3, 0, 0])
        path_label_4.move_to([-3.7, -1.3, 0])
        self.play(Write(path_label_1))
        self.play(Write(path_label_2))
        self.play(Write(path_label_3))
        self.play(Write(path_label_4))

        # Add labels for vertices
        labels = [
            Text("E", font_size=20).move_to([-6.5, 1.25, 0]),
            Text("F", font_size=20).move_to([-1.5, 1.25, 0]),
            Text("H", font_size=20).move_to([-6.5, -1.25, 0]),
            Text("G", font_size=20).move_to([-1.5, -1.25, 0]),
            Text("A", font_size=20).move_to([-5.5, 1.25, 0]),
            Text("B", font_size=20).move_to([-2.3, 1.25, 0]),
            Text("D", font_size=20).move_to([-5.5, -1.25, 0]),
            Text("C", font_size=20).move_to([-2.3, -1.25, 0]),
        ]

        for label in labels:
            self.play(Write(label))

        self.wait(1)
        t2 = Text("Given, plot is 60m long,40 m wide and path is 3m wide.Find Area of path",font_size=22)
        t2.move_to([2,2.5, 0])
        self.play(Write(t2))
        self.wait(1.5)
        t3 = Text("->inner rectangle: length=60m,breadth=40m",font_size=20)
        t3.move_to([4,1.5, 0])
        self.play(Write(t3))
        self.wait(1.5)
        t4 = Text("->area=60 * 40=2400",font_size=20)
        t4.move_to([3,1, 0])
        self.wait(1.5)
        self.play(Write(t4))
        t5 = Text("->path width=3m",font_size=20)
        t5.move_to([2.5,0.5, 0])
        self.play(Write(t5))
        self.wait(1.5)
        t6 = Text("->outer rectangle: length=60m+(3+3)m= 66, breadth=40m(3+3)m= 46",font_size=20)
        t6.move_to([2.5,0, 0])
        self.play(Write(t6))
        self.wait(1.5)
        t7 = Text("->area=66 * 46=3036",font_size=20)
        t7.move_to([3,-0.5, 0])
        self.play(Write(t7))
        self.wait(1.5)
        t8 = Text("->area of path= 3036-2400= 636",font_size=20)
        t8.move_to([2.8,-1, 0])
        self.play(Write(t8))
        self.wait(2)
        
if __name__ == "__main__":
    scene = Grade7Ch13AreaAndPerimeter()
    scene.render()